// deno-lint-ignore-file

// This file is automatically generated by deno_bindgen.
// Do not edit this file directly.

const { dlopen } = Deno;

const { symbols } = dlopen("/Users/ae/src/1001harps/charseq/bindings/midi/target/release/libmidi.dylib", {
  __Midi_new: {
    parameters: [],
    result: 'pointer',
    nonblocking: false
  },
  __Midi_note_on: {
    parameters: [
      'pointer',
      'u8',
      'u8',
    ],
    result: 'void',
    nonblocking: false
  },
  __Midi_note_off: {
    parameters: [
      'pointer',
      'u8',
      'u8',
    ],
    result: 'void',
    nonblocking: false
  },
  __Midi_dealloc: {
    parameters: [
      'pointer',
    ],
    result: 'void',
    nonblocking: false
  },
});

function __Midi_new(): Midi {
  const ret = symbols.__Midi_new()
  return Midi.__constructor(ret);
}

function __Midi_note_on(
  arg0: Deno.PointerObject | null,
  arg1: number,
  arg2: number,
): void {
  return symbols.__Midi_note_on(
    arg0,
    arg1,
    arg2,
  )
}

function __Midi_note_off(
  arg0: Deno.PointerObject | null,
  arg1: number,
  arg2: number,
): void {
  return symbols.__Midi_note_off(
    arg0,
    arg1,
    arg2,
  )
}

function __Midi_dealloc(
  arg0: Deno.PointerObject | null,
): void {
  return symbols.__Midi_dealloc(
    arg0,
  )
}

export class Midi {
  ptr: Deno.PointerObject | null = null;

  static __constructor(ptr: Deno.PointerObject | null) {
    const self = Object.create(Midi.prototype);
    self.ptr = ptr;
    return self;
  }

  [Symbol.dispose]() {
    this.dealloc();
    this.ptr = null;
  }

  constructor() {
    return __Midi_new()
  }

  note_on(arg0: number, arg1: number): void {
    return __Midi_note_on(
      this.ptr,
      arg0,
      arg1,
    )
  }

  note_off(arg0: number, arg1: number): void {
    return __Midi_note_off(
      this.ptr,
      arg0,
      arg1,
    )
  }

  dealloc(): void {
    return __Midi_dealloc(
      this.ptr,
    )
  }
}

